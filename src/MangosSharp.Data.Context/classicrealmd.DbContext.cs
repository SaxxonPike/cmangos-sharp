/* THIS FILE IS AUTOMATICALLY GENERATED */

using MangosSharp.Data.Entities.RealmDatabase;
using Microsoft.EntityFrameworkCore;

// ReSharper disable All

namespace MangosSharp.Data.Context;

public sealed class ClassicrealmdDbContext : DbContext
{
    public ClassicrealmdDbContext() {}
    public ClassicrealmdDbContext(DbContextOptions options) : base(options) {}
    protected override void OnModelCreating(ModelBuilder builder)
    {
        builder.Entity<Account>().HasKey(e => new { e.Id });
        builder.Entity<Account>().ToTable("account");
        builder.Entity<AccountBanned>().HasKey(e => new { e.Id });
        builder.Entity<AccountBanned>().ToTable("account_banned");
        builder.Entity<AccountLogons>().HasKey(e => new { e.Id });
        builder.Entity<AccountLogons>().ToTable("account_logons");
        builder.Entity<AccountRaf>().HasKey(e => new { e.Referred, e.Referrer });
        builder.Entity<AccountRaf>().ToTable("account_raf");
        builder.Entity<AntispamBlacklist>().HasKey(e => new { e.String });
        builder.Entity<AntispamBlacklist>().ToTable("antispam_blacklist");
        builder.Entity<AntispamReplacement>().HasKey(e => new { e.From });
        builder.Entity<AntispamReplacement>().ToTable("antispam_replacement");
        builder.Entity<AntispamUnicodeReplacement>().HasKey(e => new { e.From });
        builder.Entity<AntispamUnicodeReplacement>().ToTable("antispam_unicode_replacement");
        builder.Entity<IpBanned>().HasKey(e => new { e.BannedAt, e.Ip });
        builder.Entity<IpBanned>().ToTable("ip_banned");
        builder.Entity<Realmcharacters>().HasKey(e => new { e.Acctid, e.Realmid });
        builder.Entity<Realmcharacters>().ToTable("realmcharacters");
        builder.Entity<Realmlist>().HasKey(e => new { e.Id });
        builder.Entity<Realmlist>().ToTable("realmlist");
        builder.Entity<SystemFingerprintUsage>().HasKey(e => new { e.Id });
        builder.Entity<SystemFingerprintUsage>().ToTable("system_fingerprint_usage");
        builder.Entity<UpTime>().HasKey(e => new { e.Maxplayers, e.Realmid, e.Starttime });
        builder.Entity<UpTime>().ToTable("uptime");
        builder.Entity<Account>().Property(e => e.ActiveRealmId).HasColumnName("active_realm_id");
        builder.Entity<Account>().Property(e => e.ActiveRealmId).HasColumnType("int unsigned");
        builder.Entity<Account>().Property(e => e.ActiveRealmId).HasDefaultValue();
        builder.Entity<Account>().Property(e => e.ActiveRealmId).IsRequired();
        builder.Entity<Account>().Property(e => e.Email).HasColumnName("email");
        builder.Entity<Account>().Property(e => e.Email).HasColumnType("text");
        builder.Entity<Account>().Property(e => e.Email).HasMaxLength(65535);
        builder.Entity<Account>().Property(e => e.Expansion).HasColumnName("expansion");
        builder.Entity<Account>().Property(e => e.Expansion).HasColumnType("tinyint unsigned");
        builder.Entity<Account>().Property(e => e.Expansion).HasDefaultValue();
        builder.Entity<Account>().Property(e => e.Expansion).IsRequired();
        builder.Entity<Account>().Property(e => e.FailedLogins).HasColumnName("failed_logins");
        builder.Entity<Account>().Property(e => e.FailedLogins).HasColumnType("int unsigned");
        builder.Entity<Account>().Property(e => e.FailedLogins).HasDefaultValue();
        builder.Entity<Account>().Property(e => e.FailedLogins).IsRequired();
        builder.Entity<Account>().Property(e => e.Flags).HasColumnName("flags");
        builder.Entity<Account>().Property(e => e.Flags).HasColumnType("int unsigned");
        builder.Entity<Account>().Property(e => e.Flags).HasDefaultValue();
        builder.Entity<Account>().Property(e => e.Flags).IsRequired();
        builder.Entity<Account>().Property(e => e.Gmlevel).HasColumnName("gmlevel");
        builder.Entity<Account>().Property(e => e.Gmlevel).HasColumnType("tinyint unsigned");
        builder.Entity<Account>().Property(e => e.Gmlevel).HasDefaultValue();
        builder.Entity<Account>().Property(e => e.Gmlevel).IsRequired();
        builder.Entity<Account>().Property(e => e.Id).HasColumnName("id");
        builder.Entity<Account>().Property(e => e.Id).HasColumnType("int unsigned");
        builder.Entity<Account>().Property(e => e.Id).IsRequired();
        builder.Entity<Account>().Property(e => e.Joindate).HasColumnName("joindate");
        builder.Entity<Account>().Property(e => e.Joindate).HasColumnType("timestamp");
        builder.Entity<Account>().Property(e => e.Joindate).HasDefaultValue();
        builder.Entity<Account>().Property(e => e.Joindate).IsRequired();
        builder.Entity<Account>().Property(e => e.LastModule).HasColumnName("last_module");
        builder.Entity<Account>().Property(e => e.LastModule).HasColumnType("char(32)");
        builder.Entity<Account>().Property(e => e.LastModule).HasDefaultValue();
        builder.Entity<Account>().Property(e => e.LastModule).HasMaxLength(32);
        builder.Entity<Account>().Property(e => e.Locale).HasColumnName("locale");
        builder.Entity<Account>().Property(e => e.Locale).HasColumnType("varchar(4)");
        builder.Entity<Account>().Property(e => e.Locale).HasDefaultValue();
        builder.Entity<Account>().Property(e => e.Locale).IsRequired();
        builder.Entity<Account>().Property(e => e.Locale).HasMaxLength(4);
        builder.Entity<Account>().Property(e => e.Locked).HasColumnName("locked");
        builder.Entity<Account>().Property(e => e.Locked).HasColumnType("tinyint unsigned");
        builder.Entity<Account>().Property(e => e.Locked).HasDefaultValue();
        builder.Entity<Account>().Property(e => e.Locked).IsRequired();
        builder.Entity<Account>().Property(e => e.LockedIp).HasColumnName("lockedIp");
        builder.Entity<Account>().Property(e => e.LockedIp).HasColumnType("varchar(30)");
        builder.Entity<Account>().Property(e => e.LockedIp).HasDefaultValue();
        builder.Entity<Account>().Property(e => e.LockedIp).IsRequired();
        builder.Entity<Account>().Property(e => e.LockedIp).HasMaxLength(30);
        builder.Entity<Account>().Property(e => e.ModuleDay).HasColumnName("module_day");
        builder.Entity<Account>().Property(e => e.ModuleDay).HasColumnType("mediumint unsigned");
        builder.Entity<Account>().Property(e => e.ModuleDay).HasDefaultValue();
        builder.Entity<Account>().Property(e => e.ModuleDay).IsRequired();
        builder.Entity<Account>().Property(e => e.Mutetime).HasColumnName("mutetime");
        builder.Entity<Account>().Property(e => e.Mutetime).HasColumnType("bigint unsigned");
        builder.Entity<Account>().Property(e => e.Mutetime).HasDefaultValue();
        builder.Entity<Account>().Property(e => e.Mutetime).IsRequired();
        builder.Entity<Account>().Property(e => e.Os).HasColumnName("os");
        builder.Entity<Account>().Property(e => e.Os).HasColumnType("varchar(4)");
        builder.Entity<Account>().Property(e => e.Os).HasDefaultValue();
        builder.Entity<Account>().Property(e => e.Os).IsRequired();
        builder.Entity<Account>().Property(e => e.Os).HasMaxLength(4);
        builder.Entity<Account>().Property(e => e.S).HasColumnName("s");
        builder.Entity<Account>().Property(e => e.S).HasColumnType("longtext");
        builder.Entity<Account>().Property(e => e.Sessionkey).HasColumnName("sessionkey");
        builder.Entity<Account>().Property(e => e.Sessionkey).HasColumnType("longtext");
        builder.Entity<Account>().Property(e => e.Token).HasColumnName("token");
        builder.Entity<Account>().Property(e => e.Token).HasColumnType("text");
        builder.Entity<Account>().Property(e => e.Token).HasMaxLength(65535);
        builder.Entity<Account>().Property(e => e.Username).HasColumnName("username");
        builder.Entity<Account>().Property(e => e.Username).HasColumnType("varchar(32)");
        builder.Entity<Account>().Property(e => e.Username).HasDefaultValue();
        builder.Entity<Account>().Property(e => e.Username).IsRequired();
        builder.Entity<Account>().Property(e => e.Username).HasMaxLength(32);
        builder.Entity<Account>().Property(e => e.V).HasColumnName("v");
        builder.Entity<Account>().Property(e => e.V).HasColumnType("longtext");
        builder.Entity<AccountBanned>().Property(e => e.AccountId).HasColumnName("account_id");
        builder.Entity<AccountBanned>().Property(e => e.AccountId).HasColumnType("int");
        builder.Entity<AccountBanned>().Property(e => e.AccountId).HasDefaultValue();
        builder.Entity<AccountBanned>().Property(e => e.AccountId).IsRequired();
        builder.Entity<AccountBanned>().Property(e => e.Active).HasColumnName("active");
        builder.Entity<AccountBanned>().Property(e => e.Active).HasColumnType("tinyint");
        builder.Entity<AccountBanned>().Property(e => e.Active).HasDefaultValue();
        builder.Entity<AccountBanned>().Property(e => e.Active).IsRequired();
        builder.Entity<AccountBanned>().Property(e => e.BannedAt).HasColumnName("banned_at");
        builder.Entity<AccountBanned>().Property(e => e.BannedAt).HasColumnType("bigint");
        builder.Entity<AccountBanned>().Property(e => e.BannedAt).HasDefaultValue();
        builder.Entity<AccountBanned>().Property(e => e.BannedAt).IsRequired();
        builder.Entity<AccountBanned>().Property(e => e.BannedBy).HasColumnName("banned_by");
        builder.Entity<AccountBanned>().Property(e => e.BannedBy).HasColumnType("varchar(50)");
        builder.Entity<AccountBanned>().Property(e => e.BannedBy).IsRequired();
        builder.Entity<AccountBanned>().Property(e => e.BannedBy).HasMaxLength(50);
        builder.Entity<AccountBanned>().Property(e => e.ExpiresAt).HasColumnName("expires_at");
        builder.Entity<AccountBanned>().Property(e => e.ExpiresAt).HasColumnType("bigint");
        builder.Entity<AccountBanned>().Property(e => e.ExpiresAt).HasDefaultValue();
        builder.Entity<AccountBanned>().Property(e => e.ExpiresAt).IsRequired();
        builder.Entity<AccountBanned>().Property(e => e.Id).HasColumnName("id");
        builder.Entity<AccountBanned>().Property(e => e.Id).HasColumnType("int");
        builder.Entity<AccountBanned>().Property(e => e.Id).IsRequired();
        builder.Entity<AccountBanned>().Property(e => e.Reason).HasColumnName("reason");
        builder.Entity<AccountBanned>().Property(e => e.Reason).HasColumnType("varchar(255)");
        builder.Entity<AccountBanned>().Property(e => e.Reason).IsRequired();
        builder.Entity<AccountBanned>().Property(e => e.Reason).HasMaxLength(255);
        builder.Entity<AccountBanned>().Property(e => e.UnbannedAt).HasColumnName("unbanned_at");
        builder.Entity<AccountBanned>().Property(e => e.UnbannedAt).HasColumnType("bigint");
        builder.Entity<AccountBanned>().Property(e => e.UnbannedAt).HasDefaultValue();
        builder.Entity<AccountBanned>().Property(e => e.UnbannedAt).IsRequired();
        builder.Entity<AccountBanned>().Property(e => e.UnbannedBy).HasColumnName("unbanned_by");
        builder.Entity<AccountBanned>().Property(e => e.UnbannedBy).HasColumnType("varchar(50)");
        builder.Entity<AccountBanned>().Property(e => e.UnbannedBy).HasMaxLength(50);
        builder.Entity<AccountLogons>().Property(e => e.AccountId).HasColumnName("accountId");
        builder.Entity<AccountLogons>().Property(e => e.AccountId).HasColumnType("int unsigned");
        builder.Entity<AccountLogons>().Property(e => e.AccountId).IsRequired();
        builder.Entity<AccountLogons>().Property(e => e.Id).HasColumnName("id");
        builder.Entity<AccountLogons>().Property(e => e.Id).HasColumnType("int");
        builder.Entity<AccountLogons>().Property(e => e.Id).IsRequired();
        builder.Entity<AccountLogons>().Property(e => e.Ip).HasColumnName("ip");
        builder.Entity<AccountLogons>().Property(e => e.Ip).HasColumnType("varchar(30)");
        builder.Entity<AccountLogons>().Property(e => e.Ip).IsRequired();
        builder.Entity<AccountLogons>().Property(e => e.Ip).HasMaxLength(30);
        builder.Entity<AccountLogons>().Property(e => e.LoginSource).HasColumnName("loginSource");
        builder.Entity<AccountLogons>().Property(e => e.LoginSource).HasColumnType("int unsigned");
        builder.Entity<AccountLogons>().Property(e => e.LoginSource).IsRequired();
        builder.Entity<AccountLogons>().Property(e => e.LoginTime).HasColumnName("loginTime");
        builder.Entity<AccountLogons>().Property(e => e.LoginTime).HasColumnType("timestamp");
        builder.Entity<AccountLogons>().Property(e => e.LoginTime).IsRequired();
        builder.Entity<AccountRaf>().Property(e => e.Referred).HasColumnName("referred");
        builder.Entity<AccountRaf>().Property(e => e.Referred).HasColumnType("int unsigned");
        builder.Entity<AccountRaf>().Property(e => e.Referred).HasDefaultValue();
        builder.Entity<AccountRaf>().Property(e => e.Referred).IsRequired();
        builder.Entity<AccountRaf>().Property(e => e.Referrer).HasColumnName("referrer");
        builder.Entity<AccountRaf>().Property(e => e.Referrer).HasColumnType("int unsigned");
        builder.Entity<AccountRaf>().Property(e => e.Referrer).HasDefaultValue();
        builder.Entity<AccountRaf>().Property(e => e.Referrer).IsRequired();
        builder.Entity<AntispamBlacklist>().Property(e => e.String).HasColumnName("string");
        builder.Entity<AntispamBlacklist>().Property(e => e.String).HasColumnType("varchar(64)");
        builder.Entity<AntispamBlacklist>().Property(e => e.String).IsRequired();
        builder.Entity<AntispamBlacklist>().Property(e => e.String).HasMaxLength(64);
        builder.Entity<AntispamReplacement>().Property(e => e.From).HasColumnName("from");
        builder.Entity<AntispamReplacement>().Property(e => e.From).HasColumnType("varchar(32)");
        builder.Entity<AntispamReplacement>().Property(e => e.From).HasDefaultValue();
        builder.Entity<AntispamReplacement>().Property(e => e.From).IsRequired();
        builder.Entity<AntispamReplacement>().Property(e => e.From).HasMaxLength(32);
        builder.Entity<AntispamReplacement>().Property(e => e.To).HasColumnName("to");
        builder.Entity<AntispamReplacement>().Property(e => e.To).HasColumnType("varchar(32)");
        builder.Entity<AntispamReplacement>().Property(e => e.To).HasDefaultValue();
        builder.Entity<AntispamReplacement>().Property(e => e.To).IsRequired();
        builder.Entity<AntispamReplacement>().Property(e => e.To).HasMaxLength(32);
        builder.Entity<AntispamUnicodeReplacement>().Property(e => e.From).HasColumnName("from");
        builder.Entity<AntispamUnicodeReplacement>().Property(e => e.From).HasColumnType("mediumint unsigned");
        builder.Entity<AntispamUnicodeReplacement>().Property(e => e.From).HasDefaultValue();
        builder.Entity<AntispamUnicodeReplacement>().Property(e => e.From).IsRequired();
        builder.Entity<AntispamUnicodeReplacement>().Property(e => e.To).HasColumnName("to");
        builder.Entity<AntispamUnicodeReplacement>().Property(e => e.To).HasColumnType("mediumint unsigned");
        builder.Entity<AntispamUnicodeReplacement>().Property(e => e.To).HasDefaultValue();
        builder.Entity<AntispamUnicodeReplacement>().Property(e => e.To).IsRequired();
        builder.Entity<IpBanned>().Property(e => e.BannedAt).HasColumnName("banned_at");
        builder.Entity<IpBanned>().Property(e => e.BannedAt).HasColumnType("bigint");
        builder.Entity<IpBanned>().Property(e => e.BannedAt).IsRequired();
        builder.Entity<IpBanned>().Property(e => e.BannedBy).HasColumnName("banned_by");
        builder.Entity<IpBanned>().Property(e => e.BannedBy).HasColumnType("varchar(50)");
        builder.Entity<IpBanned>().Property(e => e.BannedBy).HasDefaultValue();
        builder.Entity<IpBanned>().Property(e => e.BannedBy).IsRequired();
        builder.Entity<IpBanned>().Property(e => e.BannedBy).HasMaxLength(50);
        builder.Entity<IpBanned>().Property(e => e.ExpiresAt).HasColumnName("expires_at");
        builder.Entity<IpBanned>().Property(e => e.ExpiresAt).HasColumnType("bigint");
        builder.Entity<IpBanned>().Property(e => e.ExpiresAt).IsRequired();
        builder.Entity<IpBanned>().Property(e => e.Ip).HasColumnName("ip");
        builder.Entity<IpBanned>().Property(e => e.Ip).HasColumnType("varchar(32)");
        builder.Entity<IpBanned>().Property(e => e.Ip).HasDefaultValue();
        builder.Entity<IpBanned>().Property(e => e.Ip).IsRequired();
        builder.Entity<IpBanned>().Property(e => e.Ip).HasMaxLength(32);
        builder.Entity<IpBanned>().Property(e => e.Reason).HasColumnName("reason");
        builder.Entity<IpBanned>().Property(e => e.Reason).HasColumnType("varchar(255)");
        builder.Entity<IpBanned>().Property(e => e.Reason).HasDefaultValue();
        builder.Entity<IpBanned>().Property(e => e.Reason).IsRequired();
        builder.Entity<IpBanned>().Property(e => e.Reason).HasMaxLength(255);
        builder.Entity<Realmcharacters>().Property(e => e.Acctid).HasColumnName("acctid");
        builder.Entity<Realmcharacters>().Property(e => e.Acctid).HasColumnType("bigint unsigned");
        builder.Entity<Realmcharacters>().Property(e => e.Acctid).IsRequired();
        builder.Entity<Realmcharacters>().Property(e => e.Numchars).HasColumnName("numchars");
        builder.Entity<Realmcharacters>().Property(e => e.Numchars).HasColumnType("tinyint unsigned");
        builder.Entity<Realmcharacters>().Property(e => e.Numchars).HasDefaultValue();
        builder.Entity<Realmcharacters>().Property(e => e.Numchars).IsRequired();
        builder.Entity<Realmcharacters>().Property(e => e.Realmid).HasColumnName("realmid");
        builder.Entity<Realmcharacters>().Property(e => e.Realmid).HasColumnType("int unsigned");
        builder.Entity<Realmcharacters>().Property(e => e.Realmid).HasDefaultValue();
        builder.Entity<Realmcharacters>().Property(e => e.Realmid).IsRequired();
        builder.Entity<Realmlist>().Property(e => e.Address).HasColumnName("address");
        builder.Entity<Realmlist>().Property(e => e.Address).HasColumnType("varchar(32)");
        builder.Entity<Realmlist>().Property(e => e.Address).HasDefaultValue();
        builder.Entity<Realmlist>().Property(e => e.Address).IsRequired();
        builder.Entity<Realmlist>().Property(e => e.Address).HasMaxLength(32);
        builder.Entity<Realmlist>().Property(e => e.AllowedSecurityLevel).HasColumnName("allowedSecurityLevel");
        builder.Entity<Realmlist>().Property(e => e.AllowedSecurityLevel).HasColumnType("tinyint unsigned");
        builder.Entity<Realmlist>().Property(e => e.AllowedSecurityLevel).HasDefaultValue();
        builder.Entity<Realmlist>().Property(e => e.AllowedSecurityLevel).IsRequired();
        builder.Entity<Realmlist>().Property(e => e.Icon).HasColumnName("icon");
        builder.Entity<Realmlist>().Property(e => e.Icon).HasColumnType("tinyint unsigned");
        builder.Entity<Realmlist>().Property(e => e.Icon).HasDefaultValue();
        builder.Entity<Realmlist>().Property(e => e.Icon).IsRequired();
        builder.Entity<Realmlist>().Property(e => e.Id).HasColumnName("id");
        builder.Entity<Realmlist>().Property(e => e.Id).HasColumnType("int unsigned");
        builder.Entity<Realmlist>().Property(e => e.Id).IsRequired();
        builder.Entity<Realmlist>().Property(e => e.Name).HasColumnName("name");
        builder.Entity<Realmlist>().Property(e => e.Name).HasColumnType("varchar(32)");
        builder.Entity<Realmlist>().Property(e => e.Name).HasDefaultValue();
        builder.Entity<Realmlist>().Property(e => e.Name).IsRequired();
        builder.Entity<Realmlist>().Property(e => e.Name).HasMaxLength(32);
        builder.Entity<Realmlist>().Property(e => e.Population).HasColumnName("population");
        builder.Entity<Realmlist>().Property(e => e.Population).HasColumnType("float unsigned");
        builder.Entity<Realmlist>().Property(e => e.Population).HasDefaultValue();
        builder.Entity<Realmlist>().Property(e => e.Population).IsRequired();
        builder.Entity<Realmlist>().Property(e => e.Port).HasColumnName("port");
        builder.Entity<Realmlist>().Property(e => e.Port).HasColumnType("int");
        builder.Entity<Realmlist>().Property(e => e.Port).HasDefaultValue();
        builder.Entity<Realmlist>().Property(e => e.Port).IsRequired();
        builder.Entity<Realmlist>().Property(e => e.Realmbuilds).HasColumnName("realmbuilds");
        builder.Entity<Realmlist>().Property(e => e.Realmbuilds).HasColumnType("varchar(64)");
        builder.Entity<Realmlist>().Property(e => e.Realmbuilds).HasDefaultValue();
        builder.Entity<Realmlist>().Property(e => e.Realmbuilds).IsRequired();
        builder.Entity<Realmlist>().Property(e => e.Realmbuilds).HasMaxLength(64);
        builder.Entity<Realmlist>().Property(e => e.Realmflags).HasColumnName("realmflags");
        builder.Entity<Realmlist>().Property(e => e.Realmflags).HasColumnType("tinyint unsigned");
        builder.Entity<Realmlist>().Property(e => e.Realmflags).HasDefaultValue();
        builder.Entity<Realmlist>().Property(e => e.Realmflags).IsRequired();
        builder.Entity<Realmlist>().Property(e => e.Timezone).HasColumnName("timezone");
        builder.Entity<Realmlist>().Property(e => e.Timezone).HasColumnType("tinyint unsigned");
        builder.Entity<Realmlist>().Property(e => e.Timezone).HasDefaultValue();
        builder.Entity<Realmlist>().Property(e => e.Timezone).IsRequired();
        builder.Entity<SystemFingerprintUsage>().Property(e => e.Account).HasColumnName("account");
        builder.Entity<SystemFingerprintUsage>().Property(e => e.Account).HasColumnType("int unsigned");
        builder.Entity<SystemFingerprintUsage>().Property(e => e.Account).IsRequired();
        builder.Entity<SystemFingerprintUsage>().Property(e => e.Activecpus).HasColumnName("activecpus");
        builder.Entity<SystemFingerprintUsage>().Property(e => e.Activecpus).HasColumnType("int unsigned");
        builder.Entity<SystemFingerprintUsage>().Property(e => e.Architecture).HasColumnName("architecture");
        builder.Entity<SystemFingerprintUsage>().Property(e => e.Architecture).HasColumnType("varchar(16)");
        builder.Entity<SystemFingerprintUsage>().Property(e => e.Architecture).HasMaxLength(16);
        builder.Entity<SystemFingerprintUsage>().Property(e => e.Cputype).HasColumnName("cputype");
        builder.Entity<SystemFingerprintUsage>().Property(e => e.Cputype).HasColumnType("varchar(64)");
        builder.Entity<SystemFingerprintUsage>().Property(e => e.Cputype).HasMaxLength(64);
        builder.Entity<SystemFingerprintUsage>().Property(e => e.Fingerprint).HasColumnName("fingerprint");
        builder.Entity<SystemFingerprintUsage>().Property(e => e.Fingerprint).HasColumnType("int unsigned");
        builder.Entity<SystemFingerprintUsage>().Property(e => e.Fingerprint).IsRequired();
        builder.Entity<SystemFingerprintUsage>().Property(e => e.Id).HasColumnName("id");
        builder.Entity<SystemFingerprintUsage>().Property(e => e.Id).HasColumnType("int unsigned");
        builder.Entity<SystemFingerprintUsage>().Property(e => e.Id).IsRequired();
        builder.Entity<SystemFingerprintUsage>().Property(e => e.Ip).HasColumnName("ip");
        builder.Entity<SystemFingerprintUsage>().Property(e => e.Ip).HasColumnType("varchar(16)");
        builder.Entity<SystemFingerprintUsage>().Property(e => e.Ip).IsRequired();
        builder.Entity<SystemFingerprintUsage>().Property(e => e.Ip).HasMaxLength(16);
        builder.Entity<SystemFingerprintUsage>().Property(e => e.Pagesize).HasColumnName("pagesize");
        builder.Entity<SystemFingerprintUsage>().Property(e => e.Pagesize).HasColumnType("int unsigned");
        builder.Entity<SystemFingerprintUsage>().Property(e => e.Realm).HasColumnName("realm");
        builder.Entity<SystemFingerprintUsage>().Property(e => e.Realm).HasColumnType("int unsigned");
        builder.Entity<SystemFingerprintUsage>().Property(e => e.Realm).IsRequired();
        builder.Entity<SystemFingerprintUsage>().Property(e => e.Time).HasColumnName("time");
        builder.Entity<SystemFingerprintUsage>().Property(e => e.Time).HasColumnType("datetime");
        builder.Entity<SystemFingerprintUsage>().Property(e => e.Totalcpus).HasColumnName("totalcpus");
        builder.Entity<SystemFingerprintUsage>().Property(e => e.Totalcpus).HasColumnType("int unsigned");
        builder.Entity<UpTime>().Property(e => e.Maxplayers).HasColumnName("maxplayers");
        builder.Entity<UpTime>().Property(e => e.Maxplayers).HasColumnType("smallint unsigned");
        builder.Entity<UpTime>().Property(e => e.Maxplayers).HasDefaultValue();
        builder.Entity<UpTime>().Property(e => e.Maxplayers).IsRequired();
        builder.Entity<UpTime>().Property(e => e.Realmid).HasColumnName("realmid");
        builder.Entity<UpTime>().Property(e => e.Realmid).HasColumnType("int unsigned");
        builder.Entity<UpTime>().Property(e => e.Realmid).IsRequired();
        builder.Entity<UpTime>().Property(e => e.Startstring).HasColumnName("startstring");
        builder.Entity<UpTime>().Property(e => e.Startstring).HasColumnType("varchar(64)");
        builder.Entity<UpTime>().Property(e => e.Startstring).HasDefaultValue();
        builder.Entity<UpTime>().Property(e => e.Startstring).IsRequired();
        builder.Entity<UpTime>().Property(e => e.Startstring).HasMaxLength(64);
        builder.Entity<UpTime>().Property(e => e.Starttime).HasColumnName("starttime");
        builder.Entity<UpTime>().Property(e => e.Starttime).HasColumnType("bigint unsigned");
        builder.Entity<UpTime>().Property(e => e.Starttime).HasDefaultValue();
        builder.Entity<UpTime>().Property(e => e.Starttime).IsRequired();
        builder.Entity<UpTime>().Property(e => e.Uptime).HasColumnName("uptime");
        builder.Entity<UpTime>().Property(e => e.Uptime).HasColumnType("bigint unsigned");
        builder.Entity<UpTime>().Property(e => e.Uptime).HasDefaultValue();
        builder.Entity<UpTime>().Property(e => e.Uptime).IsRequired();
    }

    public DbSet<Account> Accounts { get; set; }
    public DbSet<AccountBanned> AccountBanneds { get; set; }
    public DbSet<AccountLogons> AccountLogons { get; set; }
    public DbSet<AccountRaf> AccountRafs { get; set; }
    public DbSet<AntispamBlacklist> AntispamBlacklists { get; set; }
    public DbSet<AntispamReplacement> AntispamReplacements { get; set; }
    public DbSet<AntispamUnicodeReplacement> AntispamUnicodeReplacements { get; set; }
    public DbSet<IpBanned> IpBanneds { get; set; }
    public DbSet<Realmcharacters> Realmcharacters { get; set; }
    public DbSet<Realmlist> Realmlists { get; set; }
    public DbSet<SystemFingerprintUsage> SystemFingerprintUsages { get; set; }
    public DbSet<UpTime> UpTimes { get; set; }
}
