/* THIS FILE IS AUTOMATICALLY GENERATED */

using System;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using MangosSharp.Data.Entities.RealmDatabase;
using Microsoft.EntityFrameworkCore;

// ReSharper disable All

namespace MangosSharp.Data.Context;

public sealed class ClassicrealmdDbContext : DbContext
{
    public ClassicrealmdDbContext() {}
    public ClassicrealmdDbContext(DbContextOptions options) : base(options) {}
    protected override void OnModelCreating(ModelBuilder builder)
    {
        builder.Entity<Account>().HasKey(e => new { e.Id });
        builder.Entity<AccountBanned>().HasKey(e => new { e.Id });
        builder.Entity<AccountLogons>().HasKey(e => new { e.Id });
        builder.Entity<AccountRaf>().HasKey(e => new { e.Referred, e.Referrer });
        builder.Entity<AntispamBlacklist>().HasKey(e => new { e.String });
        builder.Entity<AntispamReplacement>().HasKey(e => new { e.From });
        builder.Entity<AntispamUnicodeReplacement>().HasKey(e => new { e.From });
        builder.Entity<IpBanned>().HasKey(e => new { e.BannedAt, e.Ip });
        builder.Entity<Realmcharacters>().HasKey(e => new { e.Acctid, e.Realmid });
        builder.Entity<Realmlist>().HasKey(e => new { e.Id });
        builder.Entity<SystemFingerprintUsage>().HasKey(e => new { e.Id });
        builder.Entity<Uptime>().HasKey(e => new { e.Maxplayers, e.Realmid, e.Starttime });
        builder.Entity<Account>().Property(e => e.ActiveRealmId).HasDefaultValue();
        builder.Entity<Account>().Property(e => e.Expansion).HasDefaultValue();
        builder.Entity<Account>().Property(e => e.FailedLogins).HasDefaultValue();
        builder.Entity<Account>().Property(e => e.Flags).HasDefaultValue();
        builder.Entity<Account>().Property(e => e.Gmlevel).HasDefaultValue();
        builder.Entity<Account>().Property(e => e.Joindate).HasDefaultValue();
        builder.Entity<Account>().Property(e => e.LastModule).HasDefaultValue();
        builder.Entity<Account>().Property(e => e.Locale).HasDefaultValue();
        builder.Entity<Account>().Property(e => e.Locked).HasDefaultValue();
        builder.Entity<Account>().Property(e => e.LockedIp).HasDefaultValue();
        builder.Entity<Account>().Property(e => e.ModuleDay).HasDefaultValue();
        builder.Entity<Account>().Property(e => e.Mutetime).HasDefaultValue();
        builder.Entity<Account>().Property(e => e.Os).HasDefaultValue();
        builder.Entity<Account>().Property(e => e.Username).HasDefaultValue();
        builder.Entity<AccountBanned>().Property(e => e.AccountId).HasDefaultValue();
        builder.Entity<AccountBanned>().Property(e => e.Active).HasDefaultValue();
        builder.Entity<AccountBanned>().Property(e => e.BannedAt).HasDefaultValue();
        builder.Entity<AccountBanned>().Property(e => e.ExpiresAt).HasDefaultValue();
        builder.Entity<AccountBanned>().Property(e => e.UnbannedAt).HasDefaultValue();
        builder.Entity<AccountRaf>().Property(e => e.Referred).HasDefaultValue();
        builder.Entity<AccountRaf>().Property(e => e.Referrer).HasDefaultValue();
        builder.Entity<AntispamReplacement>().Property(e => e.From).HasDefaultValue();
        builder.Entity<AntispamReplacement>().Property(e => e.To).HasDefaultValue();
        builder.Entity<AntispamUnicodeReplacement>().Property(e => e.From).HasDefaultValue();
        builder.Entity<AntispamUnicodeReplacement>().Property(e => e.To).HasDefaultValue();
        builder.Entity<IpBanned>().Property(e => e.BannedBy).HasDefaultValue();
        builder.Entity<IpBanned>().Property(e => e.Ip).HasDefaultValue();
        builder.Entity<IpBanned>().Property(e => e.Reason).HasDefaultValue();
        builder.Entity<Realmcharacters>().Property(e => e.Numchars).HasDefaultValue();
        builder.Entity<Realmcharacters>().Property(e => e.Realmid).HasDefaultValue();
        builder.Entity<Realmlist>().Property(e => e.Address).HasDefaultValue();
        builder.Entity<Realmlist>().Property(e => e.AllowedSecurityLevel).HasDefaultValue();
        builder.Entity<Realmlist>().Property(e => e.Icon).HasDefaultValue();
        builder.Entity<Realmlist>().Property(e => e.Name).HasDefaultValue();
        builder.Entity<Realmlist>().Property(e => e.Population).HasDefaultValue();
        builder.Entity<Realmlist>().Property(e => e.Port).HasDefaultValue();
        builder.Entity<Realmlist>().Property(e => e.Realmbuilds).HasDefaultValue();
        builder.Entity<Realmlist>().Property(e => e.Realmflags).HasDefaultValue();
        builder.Entity<Realmlist>().Property(e => e.Timezone).HasDefaultValue();
        builder.Entity<Uptime>().Property(e => e.Maxplayers).HasDefaultValue();
        builder.Entity<Uptime>().Property(e => e.Startstring).HasDefaultValue();
        builder.Entity<Uptime>().Property(e => e.Starttime).HasDefaultValue();
        builder.Entity<Uptime>().Property(e => e.UpTime).HasDefaultValue();
    }

    public DbSet<Account> Accounts { get; set; }
    public DbSet<AccountBanned> AccountBanneds { get; set; }
    public DbSet<AccountLogons> AccountLogons { get; set; }
    public DbSet<AccountRaf> AccountRafs { get; set; }
    public DbSet<AntispamBlacklist> AntispamBlacklists { get; set; }
    public DbSet<AntispamReplacement> AntispamReplacements { get; set; }
    public DbSet<AntispamUnicodeReplacement> AntispamUnicodeReplacements { get; set; }
    public DbSet<IpBanned> IpBanneds { get; set; }
    public DbSet<Realmcharacters> Realmcharacters { get; set; }
    public DbSet<Realmlist> Realmlists { get; set; }
    public DbSet<SystemFingerprintUsage> SystemFingerprintUsages { get; set; }
    public DbSet<Uptime> Uptimes { get; set; }
}
